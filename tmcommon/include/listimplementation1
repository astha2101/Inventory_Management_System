#ifndef __List_Implementation1
#define __List_Implementation1 
#include<set>
#include<utility>
#include<IndexOutOfBoundsException>
#include<AbstractList>
using namespace std;
using namespace exceptions;
namespace collections
{
template<class T1,class T2,class T3>
class ListImplementation1:public AbstractList<T2>
{
multiset<pair<string,T1> *,T3> *dataList;
typename multiset<pair<string,T1> *,T3>::iterator iter;
int currentRecordIndex;
int size;
public:
ListImplementation1(multiset<pair<string,T1> *,T3> *dataList);
T2 get(int);
int getSize();
};
template<class T1,class T2,class T3>
ListImplementation1<T1,T2,T3>::ListImplementation1(multiset<pair<string,T1> *,T3> *dataList)
{
this->dataList=dataList;
this->size=dataList->size();
if(this->size>0)
{
this->iter=dataList->begin();
this->currentRecordIndex=0;
}
}
template<class T1,class T2,class T3>
T2 ListImplementation1<T1,T2,T3>::get(int i)
{
if(i<0 || i>=this->size)
{
char msg[51];
sprintf(msg,"%d is not a valid index",i);
throw IndexOutOfBoundsException(string(msg));
}
int steps;
steps=i-currentRecordIndex;
if(steps!=0)
{
advance(this->iter,steps);
}
this->currentRecordIndex=i;
return *((T2 *)((*(this->iter))->second));
}
template<class T1,class T2,class T3>
int ListImplementation1<T1,T2,T3>::getSize()
{
return this->size;
}
} 
#endif